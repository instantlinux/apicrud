---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME-api
  name: $SERVICE_NAME-api
spec:
  replicas: $REPLICAS_API
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME-api
    spec:
      containers:
      - name: $SERVICE_NAME-api
        env:
        - { name: AMQ_HOST, value: $AMQ_HOST }
        - { name: APP_ENV, value: $APP_ENV }
        - { name: CORS_ORIGINS, value: "$CORS_ORIGINS" }
        - { name: DB_CONNECTION_TIMEOUT, value: "$DB_CONNECTION_TIMEOUT" }
        - { name: DB_HOST, value: $DB_HOST }
        - { name: DB_NAME, value: $DB_NAME }
        - { name: DB_USER, value: $DB_USER }
        - { name: DOMAIN, value: $DOMAIN }
        - { name: PUBLIC_URL, value: $PUBLIC_URL }
        - { name: REDIS_HOST, value: $REDIS_HOST }
        - { name: TZ, value: $TZ }
        - name: DB_AES_SECRET
          valueFrom:
            secretKeyRef:
              name: $SERVICE_NAME-db-aes-secret
              key: $SERVICE_NAME-db-aes-secret
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: $SERVICE_NAME-db-password-$APP_ENV
              key: $SERVICE_NAME-db-password-$APP_ENV
        - name: FLASK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: $SERVICE_NAME-flask-secret
              key: $SERVICE_NAME-flask-secret
        # TODO make this optional secret available
        # - name: MAPQUEST_API_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: mapquest-api-key
        #       key: mapquest-api-key
        - name: REDIS_AES_SECRET
          valueFrom:
            secretKeyRef:
              name: $SERVICE_NAME-redis-aes-secret
              key: $SERVICE_NAME-redis-aes-secret
        image: $REGISTRY_URI/$REGISTRY_PATH/$SERVICE_NAME-api:$TAG
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          httpGet:
            path: /api/v1/health
            port: 8080
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: $LIMIT_MEM_API
          requests:
            cpu: $LIMIT_CPU_REQUEST
            memory: $LIMIT_MEM_REQUEST
      imagePullSecrets: [ $IMAGEPULL_SPEC ]
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME-api
  name: $SERVICE_NAME-api
spec:
  clusterIP: $API_IP
  ports:
  - { port: 8080, targetPort: 8080, name: web }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME-api
