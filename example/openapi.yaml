openapi: 3.0.1
info:
  title: Example apicrud
  version: "0.1"
  description: |
    This is the backend server for a simple message board.
servers:
- url: http://elbrus.ci.net:8081/api/v1
- url: http://localhost:8080/api/v1

components:
  # Endpoint definitions: Account, AccountPassword, Registration,
  # Auth, Category, Contact, Grant, Health, List,
  # Message, Person, Settings
  schemas:
    base: &schema_base
      properties: &base_endpoints
        id:
          type: string
          minLength: 10
          maxLength: 10
        category_id:
          $ref: '#/components/schemas/Category/properties/id'
        status:
          description: Status
          enum:
          - active
          - disabled
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
      type: object
    Account:
      <<: *schema_base
      description: A account
      example:
        name: fsmith
        uid: existingval
        status: active
      properties:
        name:
          description: A user's login name
          type: string
          minLength: 4
          maxLength: 32
          pattern: ^[a-z0-9@_.-]+$
        uid:
          $ref: '#/components/schemas/base/properties/id'
        contacts:
          items:
            $ref: '#/components/schemas/base/properties/id'
          type: array
          maxItems: 8
        is_admin:
          type: boolean
          default: false
        password_must_change:
          type: boolean
          default: false
        last_login:
          type: string
          format: date-time
          readOnly: true
        invalid_attempts:
          type: integer
          maximum: 100
          default: 0
          readOnly: true
        last_invalid_attempt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          minLength: 10
          maxLength: 10
        status:
          description: Status
          enum:
          - active
          - disabled
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
      required:
      - name
      - uid
      title: an account
      xml:
        name: Account
    AccountPassword:
      description: Password update
      example:
        old_password: myS3cr#t
        new_password: m0re5eCR~t
        verify_password: m0re5eCR~t
      properties:
        new_password:
          $ref: '#/components/schemas/Auth/properties/password'
        verify_password:
          $ref: '#/components/schemas/Auth/properties/password'
        old_password:
          description: Old password
          type: string
          minLength: 8
          maxLength: 64
        reset_token:
          description: Reset token
          type: string
          minLength: 8
          maxLength: 150
      required:
      - new_password
      - verify_password
      type: object
    Registration:
      description: Account registration
      example:
        identity: fsmith@verizon.net
        name: Fred Smith
        username: fsmith
      properties:
        identity:
          description: Primary identity (email address)
          type: string
          format: email
          minLength: 4
          maxLength: 32
        name:
          description: Your name
          type: string
          minLength: 4
          maxLength: 64
        username:
          description: A user's login name
          type: string
          minLength: 4
          maxLength: 32
          pattern: ^[a-z0-9@_.-]+$
        forgot_password:
          description: Send a password-reset token
          type: boolean
          default: false
      title: new user registration
      xml:
        name: Registration
    Auth:
      description: Authenticate
      example:
        username: fsmith
        password: mysecret
      properties:
        username:
          $ref: '#/components/schemas/Account/properties/name'
        password:
          description: >
            Password, use at least 3 of the following types of characters:
            (a) uppercase letters, (b) lowercase letters, (c) numbers, and/or
            (d) punctuation
          type: string
          minLength: 8
          maxLength: 64
          format: password
        guest_id:
          $ref: '#/components/schemas/base/properties/id'
        magic:
          description: Token for guest access
          type: string
          minLength: 8
          maxLength: 8
      type: object
    Category:
      description: A category
      example:
        name: name
      properties:
        id:
          type: string
          minLength: 10
          maxLength: 10
        name:
          type: string
          minLength: 2
          maxLength: 64
          pattern: ^[a-zA-Z0-9\u00C0-\u00FF@_.-]+$
        owner:
          $ref: '#/components/schemas/Account/properties/name'
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        status:
          description: status
          enum:
          - active
          - disabled
          type: string
      title: a category
      type: object
      xml:
        name: Category
    Contact:
      <<: *schema_base
      description: A method of contact
      example:
        type: email
        label: home
        info: fjones@gmail.com
        person: Frank Jones
      properties:
        <<: *base_endpoints
        label:
          description: Label
          enum:
          - home
          - mobile
          - other
          - work
          type: string
          default: home
        carrier:
          description: Mobile carrier
          enum:
          - att
          - sprint
          - tmobile
          - verizon
          type: string
          nullable: true
        type:
          description: Type of contact
          enum:
          - email
          - linkedin
          - location
          - messenger
          - slack
          - sms
          - voice
          - whatsapp
          type: string
        info:
          description: Contact info
          type: string
          minLength: 2
          maxLength: 255
        muted:
          description: Whether this contact receives notifications
          type: boolean
          default: false
        rank:
          description: Preference rank (1 is highest)
          type: integer
          default: 1
          minimum: 1
          maximum: 100
        uid:
          $ref: '#/components/schemas/base/properties/id'
        privacy:
          $ref: '#/components/schemas/List/properties/privacy'
          # default: member
        last_attempted:
          type: string
          format: date-time
          readOnly: true
        status:
          description: Status
          enum:
          - active
          - unconfirmed
          - disabled
          type: string
          default: unconfirmed
      required:
      - type
      - info
      title: a contact
      xml:
        name: Contact
    Grant:
      description: A grant
      example:
        name: name
      properties:
        id:
          type: string
          minLength: 10
          maxLength: 10
        name:
          type: string
          enum:
          - contacts
          - daily_email
          - daily_sms
          - lists
          - list_size
          - monthly_email
          - monthly_sms
        value:
          type: string
          maxLength: 64
          pattern: ^[a-zA-Z0-9@_.+-]+$
        uid:
          $ref: '#/components/schemas/base/properties/id'
        owner:
          $ref: '#/components/schemas/Person/properties/name'
          readOnly: true
        expires:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
          readOnly: true
        status:
          description: status
          enum:
          - active
          - disabled
          type: string
      required:
      - name
      - value
      - uid
      title: a grant
      type: object
      xml:
        name: Grant
    Health:
      description: Health check
      title: status
      type: object
    List:
      <<: *schema_base
      description: A list of people
      example:
        name: Oscar Night
        privacy: secret
        status: active
      properties:
        <<: *base_endpoints
        name:
          type: string
          minLength: 2
          maxLength: 64
          pattern: ^[a-zA-Z0-9\u00C0-\u00FF _&.-]+$
        members:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
          maxItems: 500
        bulk_add:
          description: Add names / contacts, with newline or comma separator
          type: string
          maxLength: 10240
          nullable: true
        privacy:
          enum:
          - public
          - invitee
          - member
          - manager
          - secret
          type: string
          # default: public
        owner:
          $ref: '#/components/schemas/Person/properties/name'
          readOnly: true
      required:
      - name
      title: a list of people
      type: object
    Location:
      <<: *schema_base
      description: A location
      example:
        name: Lookout Bar
        address: 3600 16th St
        city: San Francisco
        state: CA
        postalcode: "94114"
        privacy: public
        status: active
      properties:
        <<: *base_endpoints
        name:
          description: Venue name
          type: string
          minLength: 2
          maxLength: 64
          nullable: true
        address:
          type: string
          maxLength: 255
          nullable: true
        city:
          type: string
          minLength: 2
          maxLength: 64
        state:
          type: string
          minLength: 2
          maxLength: 10
          nullable: true
        postalcode:
          type: string
          maxLength: 12
          nullable: true
        country:
          type: string
          minLength: 2
          maxLength: 2
          default: US
        geo:
          type: array
          items:
            type: number
            minimum: -180.0
            maximum: 180.0
          maxItems: 2
          readOnly: true
        neighborhood:
          type: string
          nullable: true
        privacy:
          $ref: '#/components/schemas/List/properties/privacy'
          # default: public
        owner:
          $ref: '#/components/schemas/Person/properties/name'
          readOnly: true
      required:
      - city
      title: a location
      xml:
        name: Location
    Message:
      <<: *schema_base
      description: A message
      example:
        recipient_id: x-someone
        subject: Hello
        content: Please send me your mobile number
      properties:
        <<: *base_endpoints
        recipient_id:
          $ref: '#/components/schemas/base/properties/id'
          nullable: True
        sender_id:
          $ref: '#/components/schemas/base/properties/id'
          readOnly: true
        content:
          type: string
          minLength: 2
          maxLength: 4096
        subject:
          type: string
          minLength: 2
          maxLength: 128
        list_id:
          $ref: '#/components/schemas/base/properties/id'
          nullable: True
        privacy:
          $ref: '#/components/schemas/List/properties/privacy'
          # default: secret
        viewed:
          description: When message was first viewed
          type: string
          format: date-time
          readOnly: true
        owner:
          $ref: '#/components/schemas/Person/properties/name'
          readOnly: true
      required:
      - subject
      - content
      title: a message
      xml:
        name: Message
    Person:
      <<: *schema_base
      description: A person
      example:
        name: Jessica Simpson
        identity: jsimpson@fox.com
        lang: en_US
      properties:
        name:
          example: Fred Jones
          type: string
          maxLength: 64
        identity:
          example: f.jones@gmail.com
          type: string
          maxLength: 64
        contacts:
          items:
            $ref: '#/components/schemas/base/properties/id'
          type: array
          maxItems: 8
        referrer:
          $ref: '#/components/schemas/base/properties/id'
          nullable: true
          readOnly: true
        privacy:
          $ref: '#/components/schemas/List/properties/privacy'
          # default: public
        id:
          type: string
          minLength: 10
          maxLength: 10
        status:
          description: Status
          enum:
          - active
          - disabled
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
      required:
      - name
      title: a person
      xml:
        name: Person
    Settings:
      <<: *schema_base
      description: Miscellaneous settings defaults (per account)
      example:
        account: mylogin
      properties:
        <<: *base_endpoints
        privacy:
          $ref: '#/components/schemas/List/properties/privacy'
          # default: public
        country:
          type: string
          minLength: 2
          maxLength: 2
          default: US
        default_storage_id:
          $ref: '#/components/schemas/base/properties/id'
        smtp_smarthost:
          type: string
          format: fqdn
        smtp_port:
          type: integer
          minimum: 1
          maximum: 65535
          default: 25
        url:
          type: string
          format: url
        default_hostlist:
          $ref: '#/components/schemas/List/properties/name'
          nullable: true
        window_title:
          type: string
          minLength: 2
          maxLength: 127
          default: Example Application
        default_cat_id:
          $ref: '#/components/schemas/base/properties/id'
        administrator:
          $ref: '#/components/schemas/Person/properties/name'
      title: account-level global settings
    TZ:
      <<: *schema_base
      description: A timezone
      example:
        name: US/Eastern
      properties:
        <<: *base_endpoints
        id:
          type: integer
          minimum: 1
          maximum: 10000
        name:
          type: string
          minLength: 8
          maxLength: 255
      required:
      - name
      title: a timezone
    ApiResponse:
      description: Describes the result of uploading a resource
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: an uploaded response
      type: object

  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: example.auth.basic_auth
    example_apikey:
      in: header
      name: api_key
      type: apiKey
      x-apikeyInfoFunc: example.auth.api_key

paths:
  /account:
    get:
      summary: Find accounts by conditions
      description: Find accounts based on conditions
      operationId: find
      parameters:
      - description: Account ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Login name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Account/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/base/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      - description: Pagination token
        in: query
        name: cursor_next
        schema:
          type: string
          format: b64string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    $ref: '#/components/schemas/Account'
                  count:
                    description: count of items returned
                    type: integer
                  cursor_next:
                    description: Pagination token
                    type: string
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: account not found
      security:
      - basic: []
      tags:
      - account
      x-codegen-request-body-name: conditions
      x-openapi-router-controller: example.controllers.account.AccountController
    post:
      summary: Create a new account
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      tags:
      - account
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.account.AccountController
  /account/{id}:
    get:
      summary: Find account by ID
      description: Returns a single account
      operationId: get
      parameters:
      - description: ID of account to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: account not found
      security:
      - basic: []
      tags:
      - account
      x-openapi-router-controller: example.controllers.account.AccountController
    put:
      summary: Update an existing account
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      parameters:
      - description: account to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: account not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      tags:
      - account
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.account.AccountController
  /account/{ids}:
    delete:
      summary: Delete one or more accounts
      operationId: delete
      parameters:
      - description: account ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      tags:
      - account
      x-openapi-router-controller: example.controllers.account.AccountController
  /account_password/{uid}:
    put:
      summary: Change a password
      operationId: change_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPassword'
        required: true
      parameters:
      - description: user ID of account to change
        in: path
        name: uid
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: account not found
        405:
          content: {}
          description: Validation exception
      tags:
      - account
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.account.AccountController
    get:
      summary: Dummy read for editing account password
      operationId: get_password
      parameters:
      - description: user ID of account
        in: path
        name: uid
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPassword'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: account not found
      tags:
      - account
      x-openapi-router-controller: example.controllers.account.AccountController
  /auth:
    post:
      summary: Authenticate
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      tags:
      - auth
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.auth.AuthController
  /logout:
    get:
      summary: Log out
      operationId: logout
      responses:
        200:
          content: {}
          description: Logged out
        405:
          content: {}
          description: Invalid input
      tags:
      - auth
      x-openapi-router-controller: example.controllers.auth.AuthController
  /category:
    get:
      summary: Find categories by conditions
      description: Find categories based on conditions
      operationId: find
      parameters:
      - description: Category ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Category name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Category/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/Category/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      - description: Pagination token
        in: query
        name: cursor_next
        schema:
          type: string
          format: b64string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: array
                  $ref: '#/components/schemas/Category'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: category not found
      security:
      - basic: []
      tags:
      - category
      x-codegen-request-body-name: conditions
      x-openapi-router-controller: example.controllers.category.CategoryController
    post:
      summary: Create a new category
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      tags:
      - category
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.category.CategoryController
  /category/{id}:
    get:
      summary: Find category by ID
      description: Returns a single category
      operationId: get
      parameters:
      - description: ID of category to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: category not found
      security:
      - basic: []
      tags:
      - category
      x-openapi-router-controller: example.controllers.category.CategoryController
    put:
      summary: Update an existing category
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      parameters:
      - description: category to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: category not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      tags:
      - category
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.category.CategoryController
  /category/{ids}:
    delete:
      summary: Delete one or more categories
      operationId: delete
      parameters:
      - description: category ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      tags:
      - category
      x-openapi-router-controller: example.controllers.category.CategoryController
  /contact:
    get:
      summary: Find contacts by conditions
      description: Find contacts based on conditions
      operationId: find
      parameters:
      - description: Contact ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Person's name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Person/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/Contact/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: contact not found
      security:
      - basic: []
      tags:
      - contact
      x-openapi-router-controller: example.controllers.contact.ContactController
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        description: Create a new contact
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      summary: Create a new contact
      tags:
      - contact
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.contact.ContactController
  /contact/{id}:
    get:
      description: Returns a single contact
      operationId: get
      parameters:
      - description: ID of contact to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: contact not found
      security:
      - basic: []
      summary: Find contact by ID
      tags:
      - contact
      x-openapi-router-controller: example.controllers.contact.ContactController
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        description: Update a contact
        required: true
      parameters:
      - description: contact to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: contact not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      summary: Update an existing contact
      tags:
      - contact
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.contact.ContactController
  /contact/{ids}:
    delete:
      operationId: delete
      parameters:
      - description: contact ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      summary: Deletes one or more contacts
      tags:
      - contact
      x-openapi-router-controller: example.controllers.contact.ContactController
  /contact/confirmation_get/{id}:
    get:
      description: Get a token for contact confirmation
      operationId: confirmation_get
      parameters:
      - description: ID of contact
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                  id:
                    type: string
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: contact not found
      summary: Get a token for contact confirmation
      tags:
      - contact
      x-openapi-router-controller: example.controllers.contact.ContactController
  /contact/confirm/{token}:
    post:
      description: Present token for contact confirmation
      operationId: confirm
      parameters:
      - description: Token created by confirmation_get
        in: path
        name: token
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 255
      responses:
        201:
          content:
            application/json:
              schema:
                properties:
                  info:
                    $ref: '#/components/schemas/Contact/properties/info'
                  type:
                    $ref: '#/components/schemas/Contact/properties/type'
                  id:
                    type: string
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: contact not found
      summary: Present token for contact confirmation
      tags:
      - contact
      x-openapi-router-controller: example.controllers.contact.ContactController
  /grant:
    get:
      summary: Find grants by conditions
      description: Find grants based on conditions
      operationId: find
      parameters:
      - description: Grant ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Grant name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Grant/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/Grant/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      - description: Pagination token
        in: query
        name: cursor_next
        schema:
          type: string
          format: b64string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: array
                  $ref: '#/components/schemas/Grant'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: grant not found
      security:
      - basic: []
      tags:
      - grant
      x-codegen-request-body-name: conditions
      x-openapi-router-controller: example.controllers.grant.GrantController
    post:
      summary: Create a new grant
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grant'
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      tags:
      - grant
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.grant.GrantController
  /grant/{id}:
    get:
      summary: Find grant by ID
      description: Returns a single grant
      operationId: get
      parameters:
      - description: ID of grant to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grant'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: grant not found
      security:
      - basic: []
      tags:
      - grant
      x-openapi-router-controller: example.controllers.grant.GrantController
    put:
      summary: Update an existing grant
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grant'
        required: true
      parameters:
      - description: grant to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: grant not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      tags:
      - grant
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.grant.GrantController
  /grant/{ids}:
    delete:
      summary: Delete one or more grants
      operationId: delete
      parameters:
      - description: grant ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      tags:
      - grant
      x-openapi-router-controller: example.controllers.grant.GrantController
  /list:
    get:
      summary: Find lists by conditions
      description: Find lists based on conditions
      operationId: find
      parameters:
      - description: List ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: List name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/List/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/List/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: list not found
      security:
      - basic: []
      tags:
      - list
      x-openapi-router-controller: example.controllers.list.ListController
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
        description: Create a new list
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      summary: Create a new list
      tags:
      - list
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.list.ListController
  /list/{id}:
    get:
      description: Returns a single list
      operationId: get
      parameters:
      - description: ID of list to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: list not found
      security:
      - basic: []
      summary: Find list by ID
      tags:
      - list
      x-openapi-router-controller: example.controllers.list.ListController
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
        description: Update a list
        required: true
      parameters:
      - description: list to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: list not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      summary: Update an existing list
      tags:
      - list
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.list.ListController
  /list/{ids}:
    delete:
      operationId: delete
      parameters:
      - description: list ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      summary: Deletes one or more lists
      tags:
      - list
      x-openapi-router-controller: example.controllers.list.ListController
  /location:
    get:
      summary: Find locations by conditions
      description: Find locations based on conditions
      operationId: find
      parameters:
      - description: Location ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Venue name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Location/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/base/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: location not found
      tags:
      - location
      x-openapi-router-controller: example.controllers.location.LocationController
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        description: Create a new location
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      summary: Create a new location
      tags:
      - location
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.location.LocationController
  /location/{id}:
    get:
      description: Returns a single location
      operationId: get
      parameters:
      - description: ID of location to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: Location not found
      security:
      - basic: []
      summary: Find location by ID
      tags:
      - location
      x-openapi-router-controller: example.controllers.location.LocationController
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        description: Update a location
        required: true
      parameters:
      - description: Location id to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: Location not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      summary: Update an existing location
      tags:
      - location
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.location.LocationController
  /location/{ids}:
    delete:
      operationId: delete
      parameters:
      - description: Location ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      summary: Deletes one or more locations
      tags:
      - location
      x-openapi-router-controller: example.controllers.location.LocationController
  /message:
    get:
      summary: Find messages by conditions
      description: Find messages based on conditions
      operationId: find
      parameters:
      - description: Message ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/base/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: message not found
      security:
      - basic: []
      tags:
      - message
      x-openapi-router-controller: example.controllers.message.MessageController
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: Create a new message
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      summary: Create a new message
      tags:
      - message
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.message.MessageController
  /message/{id}:
    get:
      description: Returns a single message
      operationId: get
      parameters:
      - description: ID of message to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: Message not found
      security:
      - basic: []
      summary: Find message by ID
      tags:
      - message
      x-openapi-router-controller: example.controllers.message.MessageController
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        description: Update a message
        required: true
      parameters:
      - description: Message id to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: Message not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      summary: Update an existing message
      tags:
      - message
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.message.MessageController
  /message/{ids}:
    delete:
      operationId: delete
      parameters:
      - description: Message ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      summary: Deletes one or more messages
      tags:
      - message
      x-openapi-router-controller: example.controllers.message.MessageController
  /person:
    get:
      summary: Find people by conditions
      description: Find people based on conditions
      operationId: find
      parameters:
      - description: Person ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/base/properties/id'
      - description: Person's name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/Person/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/base/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field - allow up to ~250 ids for list-show
        in: query
        name: filter
        schema:
          type: string
          maxLength: 3328
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: person not found
      security:
      - basic: []
      tags:
      - person
      x-openapi-router-controller: example.controllers.person.PersonController
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        description: Create a new person
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      summary: Create a new person
      tags:
      - person
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.person.PersonController
  /person/{id}:
    get:
      description: Returns a single person
      operationId: get
      parameters:
      - description: ID of person to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: person not found
      security:
      - basic: []
      summary: Find person by ID
      tags:
      - person
      x-openapi-router-controller: example.controllers.person.PersonController
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        description: Update a person
        required: true
      parameters:
      - description: person to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: person not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      summary: Update an existing person
      tags:
      - person
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.person.PersonController
  /person/{ids}:
    delete:
      operationId: delete
      parameters:
      - description: person ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      summary: Deletes one or more people
      tags:
      - person
      x-openapi-router-controller: example.controllers.person.PersonController
  /settings/{id}:
    get:
      summary: Find settings by ID
      description: Returns a single settings object
      operationId: get
      parameters:
      - description: ID of settings to return
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: settings not found
      security:
      - basic: []
      tags:
      - settings
      x-openapi-router-controller: example.controllers.settings.SettingsController
    put:
      summary: Update existing settings
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      parameters:
      - description: settings to modify
        in: path
        name: id
        required: true
        schema:
          type: string
          minLength: 10
          maxLength: 10
      responses:
        404:
          content: {}
          description: settings not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      tags:
      - settings
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.settings.SettingsController
  /settings/{ids}:
    delete:
      summary: Delete one or more settings objects
      operationId: delete
      parameters:
      - description: settings ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: string
            minLength: 10
            maxLength: 10
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      tags:
      - settings
      x-openapi-router-controller: example.controllers.settings.SettingsController
  /health:
    get:
      summary: Health Check
      description: Status of API
      operationId: get
      parameters:
      - description: Tests to run
        in: query
        name: tests
        required: false
        schema:
          items:
            type: string
            maxLength: 10
          type: array
      responses:
        200:
          content: {}
          description: Health check status
        503:
          content: {}
          description: Service unhealthy
      tags:
      - health
      x-openapi-router-controller: example.controllers.health.HealthController
  /tz:
    get:
      summary: Find TZs by conditions
      description: Find TZs based on conditions
      operationId: find
      parameters:
      - description: TZ ID
        in: query
        name: id
        schema:
          $ref: '#/components/schemas/TZ/properties/id'
      - description: TZ name
        in: query
        name: name
        schema:
          $ref: '#/components/schemas/TZ/properties/name'
      - description: Status
        in: query
        name: status
        schema:
          $ref: '#/components/schemas/base/properties/status'
      - description: Maximum records to fetch
        in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 10000
      - description: Record offset for pagination
        in: query
        name: offset
        schema:
          type: integer
          minimum: 0
          maximum: 2147483647
      - description: Sort-by field
        in: query
        name: sort
        schema:
          type: string
          maxLength: 20
      - description: Sort-order field
        in: query
        name: order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Filter field
        in: query
        name: filter
        schema:
          type: string
          maxLength: 2048
      - description: Pagination token
        in: query
        name: cursor_next
        schema:
          type: string
          format: b64string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  type: array
                  $ref: '#/components/schemas/TZ'
          description: successful operation
        400:
          content: {}
          description: Invalid conditions supplied
        404:
          content: {}
          description: tz not found
      security:
      - basic: []
      tags:
      - tz
      x-codegen-request-body-name: conditions
      x-openapi-router-controller: example.controllers.tz.TZController
    post:
      summary: Create a new tz
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TZ'
        required: true
      responses:
        405:
          content: {}
          description: Invalid input
      security:
      - basic: []
      tags:
      - tz
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.tz.TZController
  /tz/{id}:
    get:
      summary: Find tz by ID
      description: Returns a single tz
      operationId: get
      parameters:
      - description: ID of tz to return
        in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
          maximum: 10000
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TZ'
          description: successful operation
        400:
          content: {}
          description: Invalid ID supplied
        404:
          content: {}
          description: tz not found
      security:
      - basic: []
      tags:
      - tz
      x-openapi-router-controller: example.controllers.tz.TZController
    put:
      summary: Update an existing tz
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TZ'
        required: true
      parameters:
      - description: tz to modify
        in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
          maximum: 10000
      responses:
        404:
          content: {}
          description: tz not found
        405:
          content: {}
          description: Validation exception
      security:
      - basic: []
      tags:
      - tz
      x-codegen-request-body-name: body
      x-openapi-router-controller: example.controllers.tz.TZController
  /tz/{ids}:
    delete:
      summary: Delete one or more TZs
      operationId: delete
      parameters:
      - description: tz ids to delete
        in: path
        name: ids
        required: true
        schema:
          items:
            type: integer
            minimum: 1
            maximum: 10000
          type: array
      - description: force-delete instead of disable
        in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        400:
          content: {}
          description: Invalid id value
      security:
      - basic: []
      tags:
      - tz
      x-openapi-router-controller: example.controllers.tz.TZController
